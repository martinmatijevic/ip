# Tipovi tokena #
#################

class TT(enum.Enum):
	OPERATOR1, OPERATOR2, OPERATOR3 = '+-*'
	OPERATOR4, OPERATOR5 = '&&', '<=>'
	KLJUČNARIJEČ = 'ključnariječ'
	class TIPTOKENA(Token): ...listovi AST metoda...

(E.GREŠKA, E.PRAZNO, E.KRAJ, E.VIŠAK već postoje)

# Leksička analiza #
####################

lex = Tokenizer(string)

Low level API:
	znak = lex.čitaj()
	lex.vrati()
	pročitano = lex.sadržaj
	yield lex.token(tip_tokena)
	raise LeksičkaGreška(...)
	lex.i, lex.j
High level API:
	lex.zvijezda(str.is...), lex.plus(...)
	for znak in iter(lex.čitaj, ''):
	lex.pročitaj(znak)
	lex.pročitaj_do(znak, uključivo=True ili False)
	if lex.slijedi(znak):
	raise lex.greška()
	yield lex.literal(TT ili TT.DEFAULT, case=True ili False)

# Sintaksna analiza (Parsiranje) #
##################################

Za izraze: * popišemo sve operatore
	   * rasporedimo ih u hijerarhiju razina po prioritetima
	   * svakoj razini pridijelimo asociranost
Napomene: * asociranost nema veze s asocijativnošću!
	  * prioritet nema veze s redoslijedom izvođenja!

* napišemo beskontekstnu gramatiku! (ne preskakati ovaj korak!:)
* svakoj varijabli (otprilike) odgovara jedna metoda parsera

postfiksni, i infiksni lijevo asocirani, operatori: iteracija (petlja)
prefiksni, i infiksni desno asocirani, operatori, te zagrade: rekurzija

class MojParser(Parser):
	def v1(self):
		if self >> PRVITIP: ...  # sljedeći je PRVITIP (pročitan)
		elif self >> {DRUGITIP, TREĆITIP}: ...  # jedan od tipova
		else:
			self.pročitaj(MORABITIOVAJTIP)
			return NekoApstraktnoStablo(tokeni...)
			self.zadnji: zadnji pročitani token
		ili else: raise self.greška()
	def v2(self):
		if self >= PRVITIP: ...  # sljedeći je PRVITIP (nepročitan)

	start = v1 (ili koja već)

stablo = MojParser.parsiraj(moj_lex(string))

# Semantička analiza #
######################

* popišemo apstraktna sintaksna stabla koja smo koristili
class NekoApstraktnoStablo(AST('atribut')): ...
class DrugoApstraktnoStablo(AST('atribut1 atribut2')): ...

* te klase imaju metode koje rade dalju semantičku analizu
  (ili je možemo raditi u globalnoj funkciji pomoću operatora ^)
- metode su najčešće rekurzivne, i baza je zadana na tipovima tokena
- često primaju parametar (mem), koji predstavlja stanje memorije:
  preslikavanje (dict) stringova (imena varijabli) u vrijednosti
  . pomoćna funkcija pogledaj(mem, token): kao mem[token.sadržaj],
    ali javlja grešku nedeklariranih varijabli ako ih nema u mem
- pretvaranje u nativne (Pythonove) tipove: tip(token.sadržaj...)

* primjeri: def vrijednost(self, mem): ... # vraća neki nativni objekt
            def izvrši(self, mem): ... # ne vraća ništa, mijenja mem
            def optimiziraj(self): ... # vraća novo (ili isto) AST

Pomoćna funkcija: prikaz(ast, dubina): prikazuje neko AST vertikalno do
zadane dubine (ispod te dubine i dalje u jednoj liniji kao print(ast))
* podASTovi su uvedeni kao Ime:, atributi pišu uvučeno ispod
* liste su uvedene kao [...], elementi pišu uvučeno s točkicama ispod

# Izvođenje #
#############

preslikavanjem na Pythonove alate (slijed, grananje, petlje)
class Grananje(AST('uvjet onda inače')):
	def izvrši(self, mem):
		if self.uvjet.vrijednost(mem): self.onda.izvrši(mem)
		else: self.inače.izvrši(mem)
* Nelokalna kontrola toka (break, continue, return, throw, goto): izuzeci
. class Prekid(Exception): diže ga Break.izvrši, hvata ga Petlja.izvrši
. class Povratak(Exception): diže ga Return.izvrši, hvata ga Poziv.izvrši

* Kod funkcijskih poziva, iskonstruiramo novi lokalni mem (scope) koji
  preslikava parametre deklaracije funkcije u argumente funkcijskog poziva
  i u njemu izvršimo tijelo funkcije

Typechecking: Preslikavanje symtab - kao mem, samo ne preslikava
imena varijabli u njihove vrijednosti nego u njihove statičke tipove
